package com.mycompany.view;

import com.mycompany.serverleilao.ServerAuction;
import com.mycompany.serverleilao.ServerCryptoUtils;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import org.json.JSONObject;

/**
 *
 * @author nandones
 */
public class AuctionPanel extends javax.swing.JPanel {

    private Thread timerThread;

    /**
     * Creates new form Panel2
     */
    public AuctionPanel() {
        initComponents();
        textAreaBids.setEditable(false);
        ServerAuction.multicastSocket = createMulticastRoom();
        startReceivingMessages();
    }

    public void timer() {
        // Interrompe a thread anterior, se estiver ativa
        if (timerThread != null && timerThread.isAlive()) {
            timerThread.interrupt();
        }

        // Reseta o cronÃ´metro para o tempo inicial
        ServerAuction.timeRemaining = ServerAuction.chronometer;
        labelDynamicChronometer.setText(String.valueOf(ServerAuction.timeRemaining));

        // Cria e inicia uma nova thread
        timerThread = new Thread(() -> {
            try {
                while (ServerAuction.timeRemaining > 0) {
                    Thread.sleep(1000); // Aguarda 1 segundo
                    ServerAuction.timeRemaining--;
                    SwingUtilities.invokeLater(()
                            -> labelDynamicChronometer.setText(String.valueOf(ServerAuction.timeRemaining))
                    );
                }
                
                JSONObject sendedjson = new JSONObject();
                
                //send json about the winner
                sendedjson.put("sender", ServerAuction.USER);
                sendedjson.put("action", "declareWinner");
                sendedjson.put("CPF", ServerAuction.higherBidCPF);
                sendedjson.put("currentPrice", ServerAuction.currentPrice);
                sendedjson.put("name", ServerAuction.itemName);
                
                textAreaBids.append("CPF : "+ServerAuction.higherBidCPF+" have bought "+ServerAuction.itemName+" for "+ServerAuction.currentPrice+" monetary units.\n");
                sendJsonToMulticast(sendedjson);
                
                buttonStartBids.setEnabled(true);
                textFieldBidIncrement.setEditable(true);
                textFieldChronometer.setEditable(true);
                textFieldDescription.setEditable(true);
                textFieldName.setEditable(true);
                textFieldStartingPrice.setEditable(true);

                textFieldBidIncrement.setText("");
                textFieldChronometer.setText("");
                textFieldDescription.setText("");
                textFieldName.setText("");
                textFieldStartingPrice.setText("");

                ServerAuction.itemName = "";
                ServerAuction.itemDescription = "";
                ServerAuction.currentPrice = 0;
                ServerAuction.bidIncrement = 0;
                ServerAuction.chronometer = 0;
                ServerAuction.higherBidCPF = "nobody";

                sendedjson.clear();

                sendedjson.put("sender", ServerAuction.USER);
                sendedjson.put("action", "itemDetails");
                sendedjson.put("name", ServerAuction.itemName);
                sendedjson.put("description", ServerAuction.itemDescription);
                sendedjson.put("currentPrice", ServerAuction.currentPrice);
                sendedjson.put("bidIncrement", ServerAuction.bidIncrement);
                sendedjson.put("chronometer", ServerAuction.chronometer);
                
                
                sendJsonToMulticast(sendedjson);

            } catch (InterruptedException e) {
                // Interrompe a thread sem erros
                Thread.currentThread().interrupt();
            }
        });
        timerThread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelSpecifications = new javax.swing.JLabel();
        buttonStartBids = new javax.swing.JButton();
        labelName = new javax.swing.JLabel();
        labelDescription = new javax.swing.JLabel();
        labelCurrentPrice = new javax.swing.JLabel();
        labelBidIncrement = new javax.swing.JLabel();
        textFieldName = new javax.swing.JTextField();
        textFieldDescription = new javax.swing.JTextField();
        textFieldStartingPrice = new javax.swing.JTextField();
        textFieldBidIncrement = new javax.swing.JTextField();
        labelChronometer = new javax.swing.JLabel();
        labelDynamicChronometer = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaBids = new javax.swing.JTextArea();
        textFieldChronometer = new javax.swing.JTextField();

        labelSpecifications.setText("product specifications:");

        buttonStartBids.setText("start auctioning the item!");
        buttonStartBids.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartBidsActionPerformed(evt);
            }
        });

        labelName.setText("name:");

        labelDescription.setText("description:");

        labelCurrentPrice.setText("current price:");

        labelBidIncrement.setText("bid increment:");

        labelChronometer.setText("chronometer:");

        labelDynamicChronometer.setText("0.00");

        textAreaBids.setColumns(20);
        textAreaBids.setRows(5);
        jScrollPane1.setViewportView(textAreaBids);

        textFieldChronometer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldChronometerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelChronometer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldChronometer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelDynamicChronometer))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelSpecifications)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelBidIncrement)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldBidIncrement))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelCurrentPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldStartingPrice))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelDescription)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldDescription))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textFieldName))
                    .addComponent(buttonStartBids, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelSpecifications)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelName)
                    .addComponent(textFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDescription)
                    .addComponent(textFieldDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCurrentPrice)
                    .addComponent(textFieldStartingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelBidIncrement)
                    .addComponent(textFieldBidIncrement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelChronometer)
                    .addComponent(labelDynamicChronometer)
                    .addComponent(textFieldChronometer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonStartBids)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * @return MulticastSocket
     */
    public static MulticastSocket createMulticastRoom() {
        try {
            InetAddress group = InetAddress.getByName(ServerAuction.multicastAddress);
            MulticastSocket multicastSocket = new MulticastSocket(ServerAuction.multicastPort);
            multicastSocket.joinGroup(group);
            System.out.println("Multicast room created at " + ServerAuction.multicastAddress + ":" + ServerAuction.multicastPort);
            return multicastSocket;
        } catch (IOException ex) {
            Logger.getLogger(AuctionPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    /**
     * If the development team (myself) decides to open a chat simultaneously to
     * the auction, but requires further modifications (jsons, textAreas, AES)
     */
    public static void startSendingMessages() {
        Thread senderThread = new Thread(() -> {
            try {
                InetAddress group = InetAddress.getByName(ServerAuction.multicastAddress);
                BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in));
                System.out.println("Type messages to send:");
                String message;
                while ((message = userInput.readLine()) != null) {
                    byte[] buffer = message.getBytes();
                    DatagramPacket packet = new DatagramPacket(buffer, buffer.length, group, ServerAuction.multicastPort);
                    ServerAuction.multicastSocket.send(packet); // Sends the message
                    System.out.println("Sent: " + message);
                }
            } catch (IOException e) {
                System.err.println("Error in sending messages: " + e.getMessage());
            }
        });
        senderThread.start();
    }

    /**
     * recieves the json, encrypts him with AES and sends to the multicast romm.
     *
     * @param json
     */
    public static void sendJsonToMulticast(JSONObject json) {

        try {
            InetAddress group = InetAddress.getByName(ServerAuction.multicastAddress);
            String message = json.toString();
            String encodedMessage = ServerCryptoUtils.encryptWithAES(message, ServerAuction.SECRET_KEY, ServerAuction.IV);

            byte[] buffer = encodedMessage.getBytes();
            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, group, ServerAuction.multicastPort);
            ServerAuction.multicastSocket.send(packet); // Sends the message
            System.out.println("sendItemDetailsJsonToMulticast: " + message);

        } catch (IOException e) {
            System.err.println("Error in sending messages: " + e.getMessage());
        }
    }

    public void startReceivingMessages() {
        Thread receiverThread = new Thread(() -> {
            try {
                byte[] buffer = new byte[1024];

                while (true) {
                    DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                    ServerAuction.multicastSocket.receive(packet); // Waits for a message
                    String receivedEncodedMessage = new String(packet.getData(), 0, packet.getLength());
                    String receivedMessage = ServerCryptoUtils.decryptWithAES(receivedEncodedMessage, ServerAuction.SECRET_KEY, ServerAuction.IV);
                    JSONObject receivedJson = new JSONObject(receivedMessage);
                    String sender = receivedJson.getString("sender");
                    String userAction = receivedJson.getString("action");

                    if (sender.equalsIgnoreCase("client")) {

                        if (userAction.equalsIgnoreCase("getDetailsAboutItem")) {
                            JSONObject sendedjson = new JSONObject();

                            sendedjson.put("sender", ServerAuction.USER);
                            sendedjson.put("action", "itemDetails");
                            sendedjson.put("name", ServerAuction.itemName);
                            sendedjson.put("description", ServerAuction.itemDescription);
                            sendedjson.put("currentPrice", ServerAuction.currentPrice);
                            sendedjson.put("bidIncrement", ServerAuction.bidIncrement);
                            sendedjson.put("chronometer", ServerAuction.chronometer);
                            System.out.println("json que o server vai enviar: " + sendedjson);
                            sendJsonToMulticast(sendedjson);
                        }

                        if (userAction.equalsIgnoreCase("makeABid")) {
                            JSONObject responseJson = new JSONObject();

                            float newValue = receivedJson.getFloat("value");

                            if (newValue > ServerAuction.currentPrice) {//if another user simultaneously made this offer, one is ignored
                                ServerAuction.currentPrice = receivedJson.getFloat("value");
                                String CPF = receivedJson.getString("CPF");
                                textAreaBids.append(("CPF : " + CPF + " is holding the highest bid with " + ServerAuction.currentPrice + "\n"));

                                responseJson.put("sender", ServerAuction.USER);
                                responseJson.put("action", "itemDetails");
                                responseJson.put("name", ServerAuction.itemName);
                                responseJson.put("description", ServerAuction.itemDescription);
                                responseJson.put("currentPrice", ServerAuction.currentPrice);
                                responseJson.put("bidIncrement", ServerAuction.bidIncrement);
                                responseJson.put("chronometer", ServerAuction.chronometer);
                                responseJson.put("CPF", CPF);
                                System.out.println("json que o server vai enviar: " + responseJson);
                                
                                ServerAuction.higherBidCPF = CPF;
                                sendJsonToMulticast(responseJson);//new details abou the item
                                timer();

                            }
                        }
                    }

                }
            } catch (IOException e) {
                System.err.println("Error in receiving messages: " + e.getMessage());
            }
        });
        receiverThread.start();
    }


    private void buttonStartBidsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartBidsActionPerformed
        JSONObject json = new JSONObject();

        ServerAuction.itemName = textFieldName.getText();
        ServerAuction.itemDescription = textFieldDescription.getText();
        ServerAuction.currentPrice = Float.parseFloat(textFieldStartingPrice.getText());
        ServerAuction.bidIncrement = Float.parseFloat(textFieldBidIncrement.getText());
        ServerAuction.chronometer = Integer.parseInt(textFieldChronometer.getText());

        json.put("sender", ServerAuction.USER);
        json.put("action", "itemDetails");
        json.put("name", ServerAuction.itemName);
        json.put("description", ServerAuction.itemDescription);
        json.put("currentPrice", ServerAuction.currentPrice);
        json.put("bidIncrement", ServerAuction.bidIncrement);
        json.put("chronometer", ServerAuction.chronometer);

        sendJsonToMulticast(json);
        timer();
        buttonStartBids.setEnabled(false);
        textFieldChronometer.setEditable(false);
        textFieldDescription.setEditable(false);
        textFieldName.setEditable(false);
        textFieldStartingPrice.setEditable(false);
        textFieldBidIncrement.setEditable(false);
    }//GEN-LAST:event_buttonStartBidsActionPerformed

    private void textFieldChronometerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldChronometerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldChronometerActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonStartBids;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelBidIncrement;
    private javax.swing.JLabel labelChronometer;
    private javax.swing.JLabel labelCurrentPrice;
    private javax.swing.JLabel labelDescription;
    private javax.swing.JLabel labelDynamicChronometer;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelSpecifications;
    private javax.swing.JTextArea textAreaBids;
    private javax.swing.JTextField textFieldBidIncrement;
    private javax.swing.JTextField textFieldChronometer;
    private javax.swing.JTextField textFieldDescription;
    private javax.swing.JTextField textFieldName;
    private javax.swing.JTextField textFieldStartingPrice;
    // End of variables declaration//GEN-END:variables
}
