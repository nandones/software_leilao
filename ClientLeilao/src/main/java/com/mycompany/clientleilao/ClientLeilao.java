package com.mycompany.clientleilao;

import com.mycompany.view.MainFrame;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Scanner;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.swing.SwingUtilities;

/**
 * So, as an evaluation of the computational security matter,
 * there is no need for an elaborate implementation to ensure user authentication, 
 * so the variables referring to Public Key, Private and CPF will be arranged in the code as a comment, 
 * when running this client, it will be necessary to uncomment a set of data.<br>
 * All keys where generated by CryptoUtils.generateRSAKeyPair().
 * @see CryptoUtils .generateRSAKeyPair()
 * @author nandones
 */
public class ClientLeilao {
    
    public static Scanner input = new Scanner(System.in);
    
    //user 1:
    //public static final String PUBLIC_KEY_BASE64 = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwQE2546Kw5F80HCSWAQnjeL03RNzTWMzkVa4ttQU0VBMu88Eq1hBmyOWOjDtckq3RA5lcoE+LCgw5vUV5FKG934TIrFYORCWujflZ7qpkmCDjb0+ePcWQKS8/pPbQtw/2GWJ7HdqH9C0GK5abGM8OJc+kCQ6W8HCts1if/2UrnKI2+L4yrmOo1dpAWoLlzbmXtxFyRxxruTTgTQ7y5KSWVGwOzlqrOzZvP0YjFyzjIfsyVz/IOP5F7IZfK6dja/I1A4Old4qsGslIfmMHesHduXbCM5ZC1bJHqDLtpUkcjSr/A9M0iJQbWv7hA6g/0Q24XUN4B+NtFAs1ki5NhPGjQIDAQAB";
    //public static final String PRIVATE_KEY_BASE64 = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDBATbnjorDkXzQcJJYBCeN4vTdE3NNYzORVri21BTRUEy7zwSrWEGbI5Y6MO1ySrdEDmVygT4sKDDm9RXkUob3fhMisVg5EJa6N+VnuqmSYIONvT549xZApLz+k9tC3D/YZYnsd2of0LQYrlpsYzw4lz6QJDpbwcK2zWJ//ZSucojb4vjKuY6jV2kBaguXNuZe3EXJHHGu5NOBNDvLkpJZUbA7OWqs7Nm8/RiMXLOMh+zJXP8g4/kXshl8rp2Nr8jUDg6V3iqwayUh+Ywd6wd25dsIzlkLVskeoMu2lSRyNKv8D0zSIlBta/uEDqD/RDbhdQ3gH420UCzWSLk2E8aNAgMBAAECggEADp5s7jUZxZ5rec5NB2WpKVIbgfNLNH1jFosfCpodyYzvgvo3PFM/BOU5J8c09Qc7wmfkvzuS3f1dVuERe23U00I1aNdN+2SKRiids7Grzm6JCF9hMABnKxZPSmkgnnvYSifGvqZ831QLkCMErlkF4rNyBbD4yqJugTIlV9R5Qo1Ai7d9e/Ura2zDY1sBsnxffpL0PGu0mwaXlqQJnsoNeuK07ihqqRRRfsP+CWLaQu7wvzy+Xy8YcXjCsKtr6FkzlF0T+nAo0hnAbGAoaNR1JrnvW5bgrxh6rrk1KS82SX80O8eLUTCfX2F5T3/vFoGkjifcjGUUkri9LbP96rI1gQKBgQDya/P6GrE2h7dzg5Qli1zt5ZU9XgHzF0Ke7cfuSslF0STo/GiMus2U8kA6wOhztA8GnKatxd2zvYTSSGZVkCm5fI+Nlvx6ZwuURJyPinGl8fyIHK5HlTjBDQ4NgQR97jr8Pvvk+L0qehbNe5wuJE2gv4boR5LcwVWVa9Uz3h+dtQKBgQDL0K3z/UCxMUZ+C9ezbe+8FiJgHzGLp1pIhZ8JE62kkT3o00WVDMkdcE7f/ieHim84XsM7FJsFlLMmH/UeVSNAxP9qH3eyO6A1k7B93bEum9swZOSk2oSrfNjizf2YqGkyk2rqzW8FW3aP9+FL8qX6MPez62RqaOgH6/AjA17MeQKBgQCdtufyphz22hLa3xap2mIqD7wpQZjJGy/nj9EL0bHiby+xOE2YiQuoxHZPAyP36oQADDhQQ7N59WmNGTcioXjTyRrnxfwaciHRY1Xr+Oj5Sla+AtLLlWRoDGNBG9fdSfksFJnynHUNRoLBSpMQXeP3GcPeKHp+jnVskcwSQ4eUJQKBgFPpeJTpgYbySJmAerAO5RLE8iYs8ZMTtaICEXYFOgp1Gc4Pnag9+Vc7c93Yn6G4Jw5IRYy/cQudKxzZL2vrlXYHJTkl93vT/KPSSGmpqlcMJ/QGtfQBW3nXDtxh/rSpMZZ3Bx/gsIK+I1QmtAU2w4r8Oh9DHLaKtmz8gIOJ0a/RAoGBAN1QPTeXOFlJZ2JjVKfQBRroPoPcMfL4Ts5mZXDaRA2GNMypwy7SjvZBlR3Y6zN+34EuKn3LtA9Wp9CMbHpuqCThB1RmxN8pafNQfxYKS3DTvC//kSNdBK+5GGoWKBr4oovF7ZCH7eWtrNq4fy/wXC5nyGtdGmYAbKgfbsC4AJ6E";
    //public static final String CPF = "00000000001";
    //user 2:
    //public static final String PUBLIC_KEY_BASE64 = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu54fYijPozPW7sDGLgFwQZ8d12edkxl4MBaFRMMgwuQ/m0kDjueg+czWiZtRHb3TJV6LnVxhJSg2p2W7EMODO7a/A223EBgZI2UkN+BKGpvvNHu/bf/XO+rOWzafKLdt5+8OY59xHRrmDri4AaunKaPNggNbXtg4tF1IO0Bz2fv7kQF3niSF3bkImNU9RE8HgU25nXrJe6N+Vtli26lMzw3LrckRu2Ue9JSeaCXJtTqISHcsC4fRa8EN9rKbCx9yphkfmGg6VlLqvk0r1KCwCkWGnG3AC1p4b1flvjgCGTlW9KgZB8ccOXsG/5WXirxqJMAirD/RdsF+IkHmI5W4qwIDAQAB";
    //public static final String PRIVATE_KEY_BASE64 = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC7nh9iKM+jM9buwMYuAXBBnx3XZ52TGXgwFoVEwyDC5D+bSQOO56D5zNaJm1EdvdMlXoudXGElKDanZbsQw4M7tr8DbbcQGBkjZSQ34Eoam+80e79t/9c76s5bNp8ot23n7w5jn3EdGuYOuLgBq6cpo82CA1te2Di0XUg7QHPZ+/uRAXeeJIXduQiY1T1ETweBTbmdesl7o35W2WLbqUzPDcutyRG7ZR70lJ5oJcm1OohIdywLh9FrwQ32spsLH3KmGR+YaDpWUuq+TSvUoLAKRYacbcALWnhvV+W+OAIZOVb0qBkHxxw5ewb/lZeKvGokwCKsP9F2wX4iQeYjlbirAgMBAAECggEAG/dpBC/DK7epfTNdFzR9sDpwr1Axq+CrCrgAq4xOkN6HILWUgzPByhqfjCmLwNwv4i0isJU5odlJtFA0vz31jOwjsvYiyJJfBOipqm6TfT3rPS6JDXOKeNL6aZxNwzr8dgsrYOw+ZzFAQ8eDHjShGVLialPnxc6DPVd+Ud68pixotFp4iPdOgV4WYrctj5Rj7T4oALHwKzeXik44epcgoAydEwbhHDcYW1IVfUcZMUSjPzKQgrE3iH1D9ykZ3dIH0hF4QhtfjgUhDdjWOQDQd+ypu6wF9dEdV88B781GEfoQwrsWeqvfmbhtWzVO0bs8FZTYWiRAchE6L6W8jhEMwQKBgQDCD16BRnRHJ31y9ZOp7UKiw+vlvccTtZAh9ahR85qXJnCYfURl7zLCelEDWd4LqOSZssSkhzZxxL4silW5iqa4ktbCNhzdIabHva0p88HABzAS80rvyMlpdyqq6grCWlg8DGt3nA85mvt7ObMDkdP2Lec9ITd6rJ1z6Lflof9/4QKBgQD3gFkQ7fQ8SIWK31s/4eK2uD5kPjMz3qmaOhl8pD+TsR/h/RQQKWCmriOdKz95se6DHvdGDJfBWoXr66Py9OeVudATIQ2Ai+RfF4gHEj2hnM0HeeubxmCnLA3XrDv60ao87VMb9pjt+ghjZm2EnWx690S1CY/2ZeNA8d6WZ+p6CwKBgQC8zRkj6vjb9Uau3tAQRf5LvxO2DCIwQbf94jQlrzzbC5IGOfGevs6CuWAyQ2+tpl7qTivU6pwEqeZgDSKEBqpX7ry0bNM+LSxHLnnX1AjPm+6gsUVZ7t5OFptTd6qKFj28BlVUJGgHoopDBArvUSSIYXaVWcjRODlj+KlZ53dd4QKBgQDkbhJGPMjphqmyZbmreUktCVmUXZAWdJCmpq71Sgbfwl/BzTniPL5WuGxoWA0qvZ18aW0huuepbmoiN4dG6uB/YVL5BM2YcgTh+y7yD9TQP49AMjfRu0Njp5ZTE0T8ltx/hS7qpSu6oMVzMIsuFbmUuHkyedPkP1+ChnnA6cIQxwKBgCSV/VHrJPNJs+9DJ73hHU65dDcs3YViI3sCvitJiuokMXnTAev340rMvJ7AKVdwhxGtCEZNYiWJFAYszczPdwgmhocgdQTmIcMKFLuj1DX+CswslHaNQDEVhLahMy9yGSznWsfanWeu22U5bz/bawQVw8QbrqatlliyPkunHwam";
    //public static final String CPF = "00000000002";
    //user 3:
    public static final String PUBLIC_KEY_BASE64 = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAp3NsyW3wFF66x2SuHf/YxHlFfeX1HzxyFwmBDDarxAGq0VxwLJdRv/mBeaM9k4Nru2wMCCUiWAIGmh183AYwMJU7HQTe0/aw/7AEwRxTBq8clzvRrx5RfHiPvc8pqeghDy0jx6Gl3Ky7+9NPipcwW8mVJRpYIDlQeFRi7eZvx772XpMjs0+mC0pnSJWm8ReqWi4aQFs4zjVz3E8xuWk+mGZSoo1ZsOUhP98zROl3A53GqCw/8qq0lnM7j4UlHbPiRwkRuAPx4Z591qDengKepmY5Suq7wfObZgyHlxxe+pFO45a5w1C63AzKWJh2KCUI6Zad8N0LKhHFw3URj054CQIDAQAB";
    public static final String PRIVATE_KEY_BASE64 = "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCnc2zJbfAUXrrHZK4d/9jEeUV95fUfPHIXCYEMNqvEAarRXHAsl1G/+YF5oz2Tg2u7bAwIJSJYAgaaHXzcBjAwlTsdBN7T9rD/sATBHFMGrxyXO9GvHlF8eI+9zymp6CEPLSPHoaXcrLv700+KlzBbyZUlGlggOVB4VGLt5m/HvvZekyOzT6YLSmdIlabxF6paLhpAWzjONXPcTzG5aT6YZlKijVmw5SE/3zNE6XcDncaoLD/yqrSWczuPhSUds+JHCRG4A/Hhnn3WoN6eAp6mZjlK6rvB85tmDIeXHF76kU7jlrnDULrcDMpYmHYoJQjplp3w3QsqEcXDdRGPTngJAgMBAAECggEALOla6K2pYjVEIF2jC53G3G9wUYOfWnjiWsZsS8PQDvqpf4ys83DEdtprPR4o0ktB1lt04KxhCTzF24kEJ5krTKSB3dckErLMJ0/k/oxjwluuLevX4gGeNmW5m92X3Z/KWiEvwwfajhTwOGslHtVNHZkz/OcTctUcfaGYhRk0qtxfyuryCM8trvWkIcf7H/y973GUgBZ5Wu08Ne/QIW9/ZFn3sqIbVtN3f5YSF7yHqZ9svUiJzWFYMBcBaMH1fdzAoeSPXdWHii/q+Zc2J5H/QREPhb1UANQTrDvrOfSdgQeElHcBk70ZYSvWxNvE157jdYk5HUnEJzkyr3vEvWraPwKBgQC5n6onLFk7quZcaaqjvBcTJo93rWi79z2xfx7SkqJVT18vu8jJvAn1gbilBqmMi857tetKzF9ga5cKn+QOH9BRXSF4SKDpgb/XOLoExXpmX08NiZfe7KtB+ozGBlYTMuBHodpzQHScx9vxJnLEU0c56Rd0vXoyjSrCcYtcieMONwKBgQDm7+/ERuvVuBGuaXFLbkUqrLv5pnEM32CTKqiXAEZmgIiaWsBtMWi6m7hancfqq3Anq0lHnNCGBW15nxs+Cmc31JZdTTTb8ZHAC6lDYVoiZsq65qzopG783jRQliiIAfZJRMkOBzN03plgKmJQj0ajv2v6VVgP8wHikA75K8mLvwKBgQCbYT6iWeo8GxuHod/3/TtniXCwolS4ewaGbL2VUK9YL/+iylMSIzhG7RZt9Xy5rFHklmxmCVuRL56Ygyz4ccMESKv6rvkbXcQDWXXFBrUluoRG9bVOIthce2mZXbZxjbXV4HMm5H54uoeufhu1oWxO2oIK84y1ghuX9knM5ZNN0wKBgHo2G5KpXYC6alD8aAJdFqlgxBF3rXf8dmUrPBC9CoSQHLpisFaYwS2P3t3FhdiAZVf440zMheWG1cp5EregVcNL807o3sJOcq1I/ogz6rkt4LdL/9EVw8554QGMlWJ0d1uK1UNhOC/u5QfpJiIv0FgzovbVV0cJeMPnLKVcMMqNAoGANeDkY/kp94Pa/gSzHgDUmGKnBPrSrdY1tkiK3f6RfM3fc53YQ9Sq8WhDvFyfSK/0g7IWLIoujh1JXowKoN9NRvlPbnCj1wK6N1s50//N1lEuqF7agv7zEWuSWMxEWmJ3PgTUDFftiRhlp3gffWA/9xN404m5aKxuKeMH/gnFY0Q=";
    public static final String CPF = "00000000003";
    

    /**
     *
     */
    public static PublicKey publicKey = CryptoUtils.convertBase64StringToPublicKey(PUBLIC_KEY_BASE64);
    public static PrivateKey privateKey = CryptoUtils.convertBase64StringToPrivateKey(PRIVATE_KEY_BASE64);
    public static SecretKey secretKey;
    


    public static void main(String[] args) throws Exception {
        //testingAES();
        //testingSignature();
        //testingRSA();
        //testingSwing();
        testingUsers();
        
    }
    
    public static void testingAES() throws Exception{
        String plaintext = "Why in the world would you hit me when im down? when im down.";
        SecretKey key = CryptoUtils.generateAESKey();
        String secretKeySTR = CryptoUtils.convertAESKeyToBase64(key);
        System.out.println("secretkey: "+secretKeySTR);
        IvParameterSpec iv = CryptoUtils.generateIvFromAESKey(key);
        String ciphertext = CryptoUtils.encryptWithAES(plaintext, key, iv);
        key = CryptoUtils.convertBase64ToSecretKey(secretKeySTR);
        System.out.println("ciphertext = "+ciphertext);
        System.out.println("texto descriptografado: "+CryptoUtils.decryptWithAES(ciphertext, key, iv));
    }
    
    public static void testingSignature() throws NoSuchAlgorithmException, Exception{
        //sender
        String message = "who could it be now?ðŸŽ·ðŸŽ·ðŸŽ·";
        KeyPair keypair = CryptoUtils.generateRSAKeyPair();
        PublicKey puk = keypair.getPublic();
        String pukSTR = CryptoUtils.convertPublicKeyToBase64String(puk);
        System.out.println("public key1  : " + pukSTR);
        PrivateKey prk = keypair.getPrivate();
        String prkSTR = CryptoUtils.convertPrivateKeyToBase64String(prk);
        System.out.println("private key1 : " + prkSTR);
        CryptoUtils.hashMessage(message);
        byte[] signatureBytes = CryptoUtils.signMessage(message, prk);
        //reciever
        PublicKey puk2 = CryptoUtils.convertBase64StringToPublicKey(pukSTR);
        PrivateKey prk2 = CryptoUtils.convertBase64StringToPrivateKey(prkSTR);
        pukSTR = CryptoUtils.convertPublicKeyToBase64String(puk2);
        System.out.println("public key2  : " + pukSTR);
        prkSTR = CryptoUtils.convertPrivateKeyToBase64String(prk2);
        System.out.println("private key2 : " + prkSTR);
        System.out.println(CryptoUtils.verifySignature(message, signatureBytes, puk2));
        System.out.println(prk.equals(prk2));
        System.out.println(puk.equals(puk2)); 
        // a new plus test
        System.out.println("insira a public key: ");
        String puk3STR = input.nextLine();
        System.out.println(pukSTR);
        PublicKey puk3 = CryptoUtils.convertBase64StringToPublicKey(puk3STR);
        System.out.println(puk.equals(puk3));
    }
    
    public static void testingRSA() throws NoSuchAlgorithmException, Exception{
        //sender
        KeyPair keyPair = CryptoUtils.generateRSAKeyPair();
        PublicKey puk = keyPair.getPublic();
        PrivateKey prk = keyPair.getPrivate();
        String plainText = "i always feels like somebody is watchiiing meee";
        String cipherText = CryptoUtils.encryptWithRSA(plainText, puk);
        String pukSTR = CryptoUtils.convertPublicKeyToBase64String(puk);
        String prkSTR = CryptoUtils.convertPrivateKeyToBase64String(prk);
        //reciever
        PublicKey puk2 = CryptoUtils.convertBase64StringToPublicKey(pukSTR);
        PrivateKey prk2 = CryptoUtils.convertBase64StringToPrivateKey(prkSTR);
        System.out.println(CryptoUtils.decryptWithRSA(cipherText, prk2));
        System.out.println("pukSTR:");
        System.out.println(pukSTR);
        System.out.println("prkSTR:");
        System.out.println(prkSTR);
        
    }
    
    public static void testingSwing(){
        SwingUtilities.invokeLater(() -> {
            MainFrame mainFrame = new MainFrame();
            mainFrame.setVisible(true); // Torna o JFrame visÃ­vel
        });
    }
    
    public static void testingUsers(){
        //sender
        String plainText = "nunca tenha medo do seu inimigo quando nÃ£o Ã© vocÃª que comeÃ§a a brigar ðŸŽµ";
        String cipherText = CryptoUtils.encryptWithRSA(plainText, publicKey);
        //reciver
        System.out.println(CryptoUtils.decryptWithRSA(cipherText, privateKey));
    }
}